// Copyright Epic Games, Inc. All Rights Reserved.

// WARNING: This code is autogenerated by VerseVMBytecodeGenerator.cs. Do not edit directly

#pragma once

FORCEINLINE FAddSuspensionCaptures MakeCaptures(const FOpAdd& Op)
{
    return FAddSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.LeftSource), GetOperand(Op.RightSource));
}

FORCEINLINE FSubSuspensionCaptures MakeCaptures(const FOpSub& Op)
{
    return FSubSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.LeftSource), GetOperand(Op.RightSource));
}

FORCEINLINE FMulSuspensionCaptures MakeCaptures(const FOpMul& Op)
{
    return FMulSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.LeftSource), GetOperand(Op.RightSource));
}

FORCEINLINE FDivSuspensionCaptures MakeCaptures(const FOpDiv& Op)
{
    return FDivSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.LeftSource), GetOperand(Op.RightSource));
}

FORCEINLINE FModSuspensionCaptures MakeCaptures(const FOpMod& Op)
{
    return FModSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.LeftSource), GetOperand(Op.RightSource));
}

FORCEINLINE FMutableAddSuspensionCaptures MakeCaptures(const FOpMutableAdd& Op)
{
    return FMutableAddSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.LeftSource), GetOperand(Op.RightSource));
}

FORCEINLINE FNegSuspensionCaptures MakeCaptures(const FOpNeg& Op)
{
    return FNegSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.Source));
}

FORCEINLINE FQuerySuspensionCaptures MakeCaptures(const FOpQuery& Op)
{
    return FQuerySuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.Source));
}

FORCEINLINE FCallSuspensionCaptures MakeCaptures(const FOpCall& Op)
{
    const VValue IncomingEffectToken = EffectToken.Get(Context);
    const VValue ReturnEffectToken = VValue::Placeholder(VPlaceholder::New(Context, 0));
    EffectToken.Set(Context, ReturnEffectToken);
    TArray<TWriteBarrier<VValue>> ArrayArguments;
    for (auto& CurrentValue : Op.Arguments)
    {
        ArrayArguments.Add({Context, GetOperand(CurrentValue)});
    }
    return FCallSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.Callee), MoveTemp(ArrayArguments), IncomingEffectToken, ReturnEffectToken);
}

FORCEINLINE FVarGetSuspensionCaptures MakeCaptures(const FOpVarGet& Op)
{
    const VValue IncomingEffectToken = EffectToken.Get(Context);
    return FVarGetSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.Var), IncomingEffectToken);
}

FORCEINLINE FVarSetSuspensionCaptures MakeCaptures(const FOpVarSet& Op)
{
    const VValue IncomingEffectToken = EffectToken.Get(Context);
    return FVarSetSuspensionCaptures(Context, GetOperand(Op.Var), GetOperand(Op.Value), IncomingEffectToken);
}

FORCEINLINE FFreezeSuspensionCaptures MakeCaptures(const FOpFreeze& Op)
{
    const VValue IncomingEffectToken = EffectToken.Get(Context);
    return FFreezeSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.Value), IncomingEffectToken);
}

FORCEINLINE FMeltSuspensionCaptures MakeCaptures(const FOpMelt& Op)
{
    const VValue IncomingEffectToken = EffectToken.Get(Context);
    return FMeltSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.Value), IncomingEffectToken);
}

FORCEINLINE FLengthSuspensionCaptures MakeCaptures(const FOpLength& Op)
{
    return FLengthSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.Container));
}

FORCEINLINE FIndexSetSuspensionCaptures MakeCaptures(const FOpIndexSet& Op)
{
    const VValue IncomingEffectToken = EffectToken.Get(Context);
    return FIndexSetSuspensionCaptures(Context, GetOperand(Op.Container), GetOperand(Op.Index), GetOperand(Op.ValueToSet), IncomingEffectToken);
}

FORCEINLINE FNewArraySuspensionCaptures MakeCaptures(const FOpNewArray& Op)
{
    TArray<TWriteBarrier<VValue>> ArrayValues;
    for (auto& CurrentValue : Op.Values)
    {
        ArrayValues.Add({Context, GetOperand(CurrentValue)});
    }
    return FNewArraySuspensionCaptures(Context, GetOperand(Op.Dest), MoveTemp(ArrayValues));
}

FORCEINLINE FNewMutableArraySuspensionCaptures MakeCaptures(const FOpNewMutableArray& Op)
{
    TArray<TWriteBarrier<VValue>> ArrayValues;
    for (auto& CurrentValue : Op.Values)
    {
        ArrayValues.Add({Context, GetOperand(CurrentValue)});
    }
    return FNewMutableArraySuspensionCaptures(Context, GetOperand(Op.Dest), MoveTemp(ArrayValues));
}

FORCEINLINE FNewMutableArrayWithCapacitySuspensionCaptures MakeCaptures(const FOpNewMutableArrayWithCapacity& Op)
{
    return FNewMutableArrayWithCapacitySuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.Size));
}

FORCEINLINE FArrayAddSuspensionCaptures MakeCaptures(const FOpArrayAdd& Op)
{
    return FArrayAddSuspensionCaptures(Context, GetOperand(Op.Container), GetOperand(Op.ValueToAdd));
}

FORCEINLINE FInPlaceMakeImmutableSuspensionCaptures MakeCaptures(const FOpInPlaceMakeImmutable& Op)
{
    return FInPlaceMakeImmutableSuspensionCaptures(Context, GetOperand(Op.Container));
}

FORCEINLINE FNewOptionSuspensionCaptures MakeCaptures(const FOpNewOption& Op)
{
    return FNewOptionSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.Value));
}

FORCEINLINE FNewMapSuspensionCaptures MakeCaptures(const FOpNewMap& Op)
{
    TArray<TWriteBarrier<VValue>> ArrayKeys;
    for (auto& CurrentValue : Op.Keys)
    {
        ArrayKeys.Add({Context, GetOperand(CurrentValue)});
    }
    TArray<TWriteBarrier<VValue>> ArrayValues;
    for (auto& CurrentValue : Op.Values)
    {
        ArrayValues.Add({Context, GetOperand(CurrentValue)});
    }
    return FNewMapSuspensionCaptures(Context, GetOperand(Op.Dest), MoveTemp(ArrayKeys), MoveTemp(ArrayValues));
}

FORCEINLINE FMapKeySuspensionCaptures MakeCaptures(const FOpMapKey& Op)
{
    return FMapKeySuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.Map), GetOperand(Op.Index));
}

FORCEINLINE FMapValueSuspensionCaptures MakeCaptures(const FOpMapValue& Op)
{
    return FMapValueSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.Map), GetOperand(Op.Index));
}

FORCEINLINE FNewClassSuspensionCaptures MakeCaptures(const FOpNewClass& Op)
{
    TArray<TWriteBarrier<VValue>> ArrayInherited;
    for (auto& CurrentValue : Op.Inherited)
    {
        ArrayInherited.Add({Context, GetOperand(CurrentValue)});
    }
    return FNewClassSuspensionCaptures(Context, GetOperand(Op.Dest), Op.Constructor, MoveTemp(ArrayInherited));
}

FORCEINLINE FNewObjectSuspensionCaptures MakeCaptures(const FOpNewObject& Op)
{
    TArray<TWriteBarrier<VValue>> ArrayValues;
    for (auto& CurrentValue : Op.Values)
    {
        ArrayValues.Add({Context, GetOperand(CurrentValue)});
    }
    return FNewObjectSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.Class), Op.Fields, MoveTemp(ArrayValues));
}

FORCEINLINE FLoadFieldSuspensionCaptures MakeCaptures(const FOpLoadField& Op)
{
    return FLoadFieldSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.Object), Op.Name);
}

FORCEINLINE FUnifyFieldSuspensionCaptures MakeCaptures(const FOpUnifyField& Op)
{
    return FUnifyFieldSuspensionCaptures(Context, GetOperand(Op.Object), Op.Name, GetOperand(Op.Value));
}

FORCEINLINE FNeqSuspensionCaptures MakeCaptures(const FOpNeq& Op)
{
    return FNeqSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.LeftSource), GetOperand(Op.RightSource));
}

FORCEINLINE FLtSuspensionCaptures MakeCaptures(const FOpLt& Op)
{
    return FLtSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.LeftSource), GetOperand(Op.RightSource));
}

FORCEINLINE FLteSuspensionCaptures MakeCaptures(const FOpLte& Op)
{
    return FLteSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.LeftSource), GetOperand(Op.RightSource));
}

FORCEINLINE FGtSuspensionCaptures MakeCaptures(const FOpGt& Op)
{
    return FGtSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.LeftSource), GetOperand(Op.RightSource));
}

FORCEINLINE FGteSuspensionCaptures MakeCaptures(const FOpGte& Op)
{
    return FGteSuspensionCaptures(Context, GetOperand(Op.Dest), GetOperand(Op.LeftSource), GetOperand(Op.RightSource));
}

