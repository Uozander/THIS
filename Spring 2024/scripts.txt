import maya.cmds as cmds

selected_objects = cmds.ls(selection=True)

selected_joints = []
for obj in selected_objects:
    if cmds.nodeType(obj) == "joint":
        selected_joints.append(obj)

def match_transforms():
    for obj in selected_joints:
        control_curve = cmds.circle(name=obj + "_FK_ctrl", normal=(1, 0, 0))[0]
        group = cmds.group(control_curve, name=obj + "_FK_grp")
        translation = cmds.xform(obj, query=True, translation=True, worldSpace=True)
        rotation = cmds.xform(obj, query=True, rotation=True, worldSpace=True)
        scale = cmds.xform(obj, query=True, scale=True, worldSpace=True)
        cmds.xform(group, translation=translation, rotation=rotation, scale=scale, worldSpace=True)
        parent_constraint = cmds.parentConstraint(obj, group, mo=True)[0]
        cmds.disconnectAttr(parent_constraint + ".constraintRotateY", group + ".rotateY")
        cmds.disconnectAttr(parent_constraint + ".constraintRotateZ", group + ".rotateZ")
        cmds.disconnectAttr(parent_constraint + ".constraintRotateX", group + ".rotateX")
        cmds.connectAttr (control_curve + ".rotate", obj + ".rotate")

match_transforms()

================

import maya.cmds as cmds

def pickwalk(selected_objects):
    up_objects = []
    selected_joints = []
    while selected_objects:
        for obj in selected_objects:
            parent_objects = cmds.listRelatives(obj, parent=True, fullPath=True)
            if parent_objects:
                print(f"Found parent objects for {obj}: {parent_objects}")
                up_objects.extend(parent_objects)
                selected_joints.append(obj) 
        selected_objects = cmds.ls(selection=True)
        print(f"Remaining selected objects: {selected_objects}")
        if not selected_objects:
            break
    return selected_joints

selected_objects = cmds.ls(selection=True)
print(f"Initial selected objects: {selected_objects}")
result = pickwalk(selected_objects)
print("Selected joints:", result)

==========
TEST
==========

import maya.cmds as cmds

selected_objects = cmds.ls(selection=True)
print(f"Initial selected objects: {selected_objects}")
parent_objects = cmds.listRelatives(selected_objects, parent=True, fullPath=True)
if parent_objects:
    print(f"Found parent objects for {selected_objects}: {parent_objects}")
    selected_objects = cmds.ls(selection=True)
    print(f"Remaining selected objects: {selected_objects}")
    print(f"{parent_objects}")

========================
no parent objects
=======================
import maya.cmds as cmds

selected_objects = cmds.ls(selection=True)
print(f"Initial selected objects: {selected_objects}")

parent_objects = cmds.listRelatives(selected_objects, parent=True, fullPath=True)

if parent_objects:
    print(f"Found parent objects for {selected_objects}: {parent_objects}")
else:
    print(f"No parent objects found for {selected_objects}")











import maya.cmds as cmds

joints = []

def pickwalk(selected_objects):
    up_objects = []
    for obj in selected_objects:
        parent_objects = cmds.listRelatives(obj, parent=True, fullPath=True)
        if parent_objects:
            up_objects.extend(parent_objects)
            cmds.select(up_objects)
            joints.extend(cmds.ls(selection=True))
            print(joints)
    return parent_objects 

selected_objects = cmds.ls(selection=True)
parent_objects = cmds.listRelatives(selected_objects, parent=True, fullPath=True)
while parent_objects:
    for obj in parent_objects:
        selected_objects = cmds.ls(selection=True)
        parent_objects = pickwalk(selected_objects)
        
#if len(joints) >= 3:
for item in joints:
    print(item)















import maya.cmds as cmds

joints = []

def pickwalk(selected_objects):
    up_objects = []
    for obj in selected_objects:
        parent_objects = cmds.listRelatives(obj, parent=True, fullPath=True)
        if parent_objects:
            up_objects.extend(parent_objects)
            cmds.select(up_objects)
            joints.extend (cmds.ls(selection=True))
            print(joints)

parent_objects = cmds.listRelatives(obj, parent=True, fullPath=True)
while parent objects:
    selected_objects = cmds.ls(selection=True)
    pickwalk(selected_objects)
print (joints[0])
print (joints[1])
print (joints[2])




































import maya.cmds as cmds

joints = []

def pickwalk(selected_objects):
    up_objects = []
    for obj in selected_objects:
        parent_objects = cmds.listRelatives(obj, parent=True, fullPath=True)
        if parent_objects:
            up_objects.extend(parent_objects)
            cmds.select(up_objects)
            joints.extend(cmds.ls(selection=True))
            print(joints)
    return parent_objects
    
def setFK(obj):
        control_curve = cmds.circle(name=obj + "_FK_ctrl", normal=(1, 0, 0))[0]
        group = cmds.group(control_curve, name=obj + "_FK_grp")
        translation = cmds.xform(obj, query=True, translation=True, worldSpace=True)
        rotation = cmds.xform(obj, query=True, rotation=True, worldSpace=True)
        scale = cmds.xform(obj, query=True, scale=True, worldSpace=True)
        cmds.xform(group, translation=translation, rotation=rotation, scale=scale, worldSpace=True)
        parent_constraint = cmds.parentConstraint(joints[x+1], group, mo=True)[0]
        cmds.disconnectAttr(parent_constraint + ".constraintRotateY", group + ".rotateY")
        cmds.disconnectAttr(parent_constraint + ".constraintRotateZ", group + ".rotateZ")
        cmds.disconnectAttr(parent_constraint + ".constraintRotateX", group + ".rotateX")
        cmds.connectAttr (control_curve + ".rotate", obj + ".rotate")
    
selected_objects = cmds.ls(selection=True)
parent_objects = cmds.listRelatives(selected_objects, parent=True, fullPath=True)
while parent_objects:
    for obj in parent_objects:
        selected_objects = cmds.ls(selection=True)
        parent_objects = pickwalk(selected_objects)  
global x=0        
for item in joints:
    setFK(item)
    x = x + 1  










































import maya.cmds as cmds

joints = []

def pickwalk(selected_objects):
    up_objects = []
    for obj in selected_objects:
        parent_objects = cmds.listRelatives(obj, parent=True, fullPath=True)
        if parent_objects:
            up_objects.extend(parent_objects)
            cmds.select(up_objects)
            joints.extend(cmds.ls(selection=True))
            print("Updated joints list:", joints)
    return parent_objects
    
def setFK(obj):
    global x
    if x < len(joints):
        control_curve = cmds.circle(name=obj + "_FK_ctrl", normal=(1, 0, 0))[0]
        group = cmds.group(control_curve, name=obj + "_FK_grp")
        translation = cmds.xform(obj, query=True, translation=True, worldSpace=True)
        rotation = cmds.xform(obj, query=True, rotation=True, worldSpace=True)
        scale = cmds.xform(obj, query=True, scale=True, worldSpace=True)
        cmds.xform(group, translation=translation, rotation=rotation, scale=scale, worldSpace=True)
        
        parent_joint = joints[x]
        parent_constraint = cmds.parentConstraint(parent_joint, group, mo=True)[0]
        cmds.disconnectAttr(parent_constraint + ".constraintRotateY", group + ".rotateY")
        cmds.disconnectAttr(parent_constraint + ".constraintRotateZ", group + ".rotateZ")
        cmds.disconnectAttr(parent_constraint + ".constraintRotateX", group + ".rotateX")
        cmds.connectAttr(control_curve + ".rotate", obj + ".rotate")
        print("Connected:", obj)
    else:
        print("END")
    
selected_objects = cmds.ls(selection=True)
parent_objects = cmds.listRelatives(selected_objects, parent=True, fullPath=True)
while parent_objects:
    for obj in parent_objects:
        selected_objects = cmds.ls(selection=True)
        parent_objects = pickwalk(selected_objects)  

x = 0  # Initialize x outside the loop
for item in joints:
    setFK(item)
    x += 1





