//HLSL

float3 rayStep = viewDir * -1;
float4 color;

struct texDistort
{
float2 texScale (float2 uv, float2 scale)
{
float2 texScale = (uv - 0.5) * scale + 0.5;
return texScale;
}
float2 texRotate(float2 uv, float angle)
{
float2x2 rotationMatrix = float2x2(cos(angle), sin(angle), -sin(angle), cos(angle));
return mul(uv - 0.5, rotationMatrix) + 0.5;
}
float2 texDistortion(float2 uv, float time)
{
float angle = atan2(uv.y - 0.5, uv.x - 0.5);
float radius = length(uv - .5);

float distortion = 0.1 * sin(20 * radius + .5 * time);
float primDist = sin(60.0 * angle) * distortion;

return texRotate(uv, distortion);
}
};
texDistort txd;

for (int i=0; i < 5; i++)
{
color = Texture2DSample(texObject, texObjectSampler, txd.texDistortion(uv, time));

if (color.r > 0.2 && color.g > 0.2 && color.b > 0.2)
{
return color * float3(0,1,0);
}
else if (color.r > 0.1 && color.g > 0.1 && color.b > 0.1)
{
return color * float3(0,1,0);
}

uv += rayStep * 6;
}

return color;